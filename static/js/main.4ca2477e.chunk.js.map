{"version":3,"sources":["components/subCard.js","components/chart.js","components/card.js","App.js","serviceWorker.js","index.js"],"names":["SubCard","props","state","className","this","label","data","PureComponent","Chart","labels","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","dataset4","dataset3","dataset2","dataset1","width","height","options","maintainAspectRatio","Card","worldData","isLoaded","inputValue","fetch","then","response","json","setState","nf","Intl","NumberFormat","countryList","Object","keys","filter","country","toLowerCase","indexOf","override","css","type","placeholder","value","onChange","val","target","map","latestConfirmed","latestRecovered","latestDeaths","latestActive","confirmedArr","recoveredArr","deathsArr","activeArr","dateArray","forEach","confirmed","recovered","deaths","date","push","key","format","size","color","loading","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4ca2477e.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport \"../App.css\";\n\nclass SubCard extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"statsCard\">\n        <p>{this.props.label}</p>\n        <h3>{this.props.data}</h3>\n      </div>\n    );\n  }\n}\n\nexport default SubCard;\n","import React, { PureComponent } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nclass Chart extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    const data = {\n      labels: this.props.labels,\n      datasets: [\n        {\n          label: \"Confirmed\",\n          fill: true,\n          lineTension: 0.1,\n          backgroundColor: \"rgba(255, 159, 64, 0.2)\",\n          borderColor: \"rgba(255, 159, 64, 1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(255, 159, 64, 1)\",\n          pointBackgroundColor: \"rgba(255, 159, 64, 0.4)\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(255, 159, 64, 1)\",\n          pointHoverBorderColor: \"rgba(255, 159, 64, 1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: this.props.dataset4,\n        },\n        {\n          label: \"Recovered\",\n          fill: true,\n          lineTension: 0.1,\n          backgroundColor: \"rgba(153, 102, 255, 0.2)\",\n          borderColor: \"rgba(153, 102, 255, 1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(153, 102, 255, 1)\",\n          pointBackgroundColor: \"rgba(153, 102, 255, 0.4)\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(153, 102, 255, 1)\",\n          pointHoverBorderColor: \"rgba(153, 102, 255, 1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: this.props.dataset3,\n        },\n        {\n          label: \"Deaths\",\n          fill: true,\n          lineTension: 0.1,\n          backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n          borderColor: \"rgba(255, 99, 132, 1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(255, 99, 132, 1)\",\n          pointBackgroundColor: \"rgba(255, 99, 132, 0.4)\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(255, 99, 132,1)\",\n          pointHoverBorderColor: \"rgba(255, 99, 132, 1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: this.props.dataset2,\n        },\n        {\n          label: \"Active\",\n          fill: true,\n          lineTension: 0.1,\n          backgroundColor: \"rgba(75,192,192,0.2)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(75,192,192,1)\",\n          pointBackgroundColor: \"rgba(75,192,192,0.4)\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n          pointHoverBorderColor: \"rgba(75,192,192,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: this.props.dataset1,\n        },\n      ],\n    };\n    return (\n      <Line\n        data={data}\n        width={100}\n        height={300}\n        options={{ maintainAspectRatio: false }}\n      />\n    );\n  }\n}\n\nexport default Chart;\n","import React, { PureComponent } from \"react\";\nimport SubCard from \"./subCard\";\nimport Chart from \"./chart\";\nimport { css } from \"@emotion/core\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\n\nclass Card extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      worldData: [],\n      isLoaded: false,\n      inputValue: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          worldData: data,\n          isLoaded: true,\n        });\n      });\n  }\n\n  render() {\n    var nf = new Intl.NumberFormat();\n    const countryList = Object.keys(this.state.worldData).filter((country) => {\n      return (\n        country.toLowerCase().indexOf(this.state.inputValue.toLowerCase()) !==\n        -1\n      );\n    });\n    const override = css`\n      display: block;\n      margin: 0 auto;\n      border-color: red;\n    `;\n\n    if (!this.state.isLoaded) {\n      return (\n        <div>\n          <header className=\"header\">\n            <h1>DAILY COVID-19 STATS</h1>\n          </header>\n          <div className=\"loadingScreen\">\n            <div>\n              <BeatLoader\n                css={override}\n                size={20}\n                color={\"#a3b4b8\"}\n                loading={true}\n              />\n              <h2>Loading the latest data...</h2>\n            </div>\n          </div>\n        </div>\n      );\n    } else\n      return (\n        <div>\n          <header>\n            <h1>DAILY COVID-19 STATS</h1>\n\n            <input\n              className=\"input\"\n              type=\"text\"\n              placeholder=\"Search Country\"\n              value={this.state.inputValue}\n              onChange={(val) =>\n                this.setState({ inputValue: val.target.value })\n              }\n            />\n          </header>\n          <div className=\"cardGrid\">\n            {countryList.map((country) => {\n              let latestConfirmed = 0;\n              let latestRecovered = 0;\n              let latestDeaths = 0;\n              let latestActive = 0;\n              //let latestDate = \"\";\n              let confirmedArr = [];\n              let recoveredArr = [];\n              let deathsArr = [];\n              let activeArr = [];\n              let dateArray = [];\n              this.state.worldData[country].forEach(\n                ({ confirmed, recovered, deaths, date }) => {\n                  //latestDate = date;\n                  latestConfirmed = confirmed;\n                  latestRecovered = recovered;\n                  latestDeaths = deaths;\n                  latestActive =\n                    latestConfirmed - latestRecovered - latestDeaths;\n                  confirmedArr.push(confirmed);\n                  recoveredArr.push(recovered);\n                  deathsArr.push(deaths);\n                  activeArr.push(latestActive);\n                  dateArray.push(date);\n                }\n              );\n              return (\n                <div className=\"card\" key={country}>\n                  <h2>{country}</h2>\n                  <div className=\"statsGrid\">\n                    <SubCard\n                      label=\"Confirmed\"\n                      data={nf.format(latestConfirmed)}\n                    />\n                    <SubCard\n                      label=\"Recovered\"\n                      data={nf.format(latestRecovered)}\n                    />\n                    <SubCard label=\"Deaths\" data={nf.format(latestDeaths)} />\n                    <SubCard label=\"Active\" data={nf.format(latestActive)} />\n                  </div>\n                  <div className=\"graphCard\">\n                    <Chart\n                      dataset1={activeArr}\n                      dataset2={deathsArr}\n                      dataset3={recoveredArr}\n                      dataset4={confirmedArr}\n                      labels={dateArray}\n                    />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          <footer>\n            <p>created by Anthony Reyes</p>\n          </footer>\n        </div>\n      );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./App.css\";\nimport Card from \"./components/card\";\n\nfunction App() {\n  return (\n    <div>\n      <Card />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}